{"version":3,"sources":["C:/projects/ngx-mask-fork/src/$_lazy_route_resource lazy","C:/projects/ngx-mask-fork/src/app/app.component.css","C:/projects/ngx-mask-fork/src/app/app.component.html","C:/projects/ngx-mask-fork/src/app/app.component.ts","C:/projects/ngx-mask-fork/src/app/app.module.ts","C:/projects/ngx-mask-fork/src/app/ngx-mask/config.ts","C:/projects/ngx-mask-fork/src/app/ngx-mask/mask.directive.ts","C:/projects/ngx-mask-fork/src/app/ngx-mask/mask.service.ts","C:/projects/ngx-mask-fork/src/app/ngx-mask/ngx-mask.module.ts","C:/projects/ngx-mask-fork/src/environments/environment.ts","C:/projects/ngx-mask-fork/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/projects/ngx-mask-fork/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/projects/ngx-mask-fork/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<style>\\r\\nmat-sidenav {\\r\\n  display: flex;\\r\\n  overflow: visible;\\r\\n}\\r\\n\\r\\n</style>\\r\\n\\r\\n<mat-sidenav-container>\\r\\n\\r\\n  <mat-sidenav mode=\\\"side\\\" opened=\\\"false\\\">\\r\\n    Side menu\\r\\n  </mat-sidenav>\\r\\n\\r\\n  <div class=\\\"container\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <header>\\r\\n          <h1>\\r\\n            <span class=\\\"jq-label\\\">Angular</span>\\r\\n            <span class=\\\"plugin-name\\\">Mask Plugin</span>\\r\\n          </h1>\\r\\n          <span class=\\\"subtitle\\\">An Angular Plugin to make masks on form fields and html elements.</span>\\r\\n        </header>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"140px\\\">\\r\\n\\r\\n          <mat-grid-tile>\\r\\n            <mat-toolbar color=\\\"primary\\\">\\r\\n              <span>Examples</span>\\r\\n            </mat-toolbar>\\r\\n          </mat-grid-tile>\\r\\n\\r\\n        </mat-grid-list>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <mat-card>\\r\\n          <mat-card-header>\\r\\n            <mat-card-title>Mask common case</mat-card-title>\\r\\n            <mat-card-subtitle>An case of date mask</mat-card-subtitle>\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"Date\\\" mask=\\\"00/00/0000\\\" [formControl]=\\\"form\\\" [(ngModel)]=\\\"dateModel\\\">\\r\\n                  <mat-hint><b>Mask:</b> 00/00/0000</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <p><b>FormControl:</b> {{ form.value ? form.value : 'Empty' }}</p>\\r\\n              </div>\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <p><b>NgModel:</b> {{ dateModel ? dateModel : 'Empty' }}</p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <mat-card>\\r\\n          <mat-card-header>\\r\\n            <mat-card-title>Other common cases</mat-card-title>\\r\\n            <mat-card-subtitle>Other common cases that you could apply in your projects. Try your self. :D</mat-card-subtitle>\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"Date and Hour\\\" mask=\\\"00/00/00 00:00:00\\\">\\r\\n                  <mat-hint><b>Mask:</b> 00/00/00 00:00:00</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"Hour\\\" mask=\\\"00:00:00\\\">\\r\\n                  <mat-hint><b>Mask:</b> 00:00:00</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"Mixed Type\\\" mask=\\\"AAA 000-S0S\\\">\\r\\n                  <mat-hint><b>Mask:</b> AAA 000-S0S</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"Phone\\\" mask=\\\"(000) 000-0000\\\">\\r\\n                  <mat-hint><b>Mask:</b> (000) 000-0000</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <mat-card>\\r\\n          <mat-card-header>\\r\\n            <mat-card-title>Masks and special characters</mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n              You could define if you want special characters propagate to the model or not with the\\r\\n              attribute <b>dropSpecialCharacters</b>.\\r\\n            </mat-card-subtitle>\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"CPF\\\" [dropSpecialCharacters]=\\\"true\\\" mask=\\\"000.000.000-00\\\" [formControl]=\\\"cpfFormControl\\\" [(ngModel)]=\\\"cpfModel\\\">\\r\\n                  <mat-hint><b>Mask:</b> 000.000.000-00</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <p><b>FormControl:</b> {{ cpfFormControl.value ? cpfFormControl.value : 'Empty' }}</p>\\r\\n              </div>\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <p><b>NgModel:</b> {{ cpfModel ? cpfModel : 'Empty' }}</p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <mat-card>\\r\\n          <mat-card-header>\\r\\n            <mat-card-title>Clear if not match</mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n              You could clear the input if the value not match the mask, you'll just need to set <b>clearIfNotMatch</b> attribute.\\r\\n            </mat-card-subtitle>\\r\\n          </mat-card-header>\\r\\n          <mat-card-content>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <mat-input-container>\\r\\n                  <input matInput placeholder=\\\"Clear if not match\\\" [clearIfNotMatch]=\\\"true\\\" mask=\\\"000.000\\\"\\r\\n                    [formControl]=\\\"clearIfNotMatchForm\\\" [(ngModel)]=\\\"clearIfNotMatchModel\\\">\\r\\n                  <mat-hint><b>Mask:</b> 000.000</mat-hint>\\r\\n                </mat-input-container>\\r\\n              </div>\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <p><b>FormControl:</b> {{ clearIfNotMatchForm.value ? clearIfNotMatchForm.value : 'Empty' }}</p>\\r\\n              </div>\\r\\n              <div class=\\\"col-mat-3\\\">\\r\\n                <p><b>NgModel:</b> {{ clearIfNotMatchModel ? clearIfNotMatchModel : 'Empty' }}</p>\\r\\n              </div>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12\\\">\\r\\n\\r\\n        <mat-grid-list cols=\\\"1\\\" rowHeight=\\\"140px\\\">\\r\\n\\r\\n          <mat-grid-tile>\\r\\n            <mat-toolbar color=\\\"primary\\\">\\r\\n              <span>Documentation - comming soon...</span>\\r\\n            </mat-toolbar>\\r\\n          </mat-grid-tile>\\r\\n\\r\\n        </mat-grid-list>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</mat-sidenav-container>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/projects/ngx-mask-fork/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component, ElementRef, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  public form: FormControl;\r\n  public dateModel: string;\r\n\r\n  public cpfFormControl: FormControl;\r\n  public cpfModel: string;\r\n\r\n  public clearIfNotMatchForm: FormControl;\r\n  public clearIfNotMatchModel: string;\r\n\r\n  public constructor() {\r\n    this.form = new FormControl('30081991');\r\n    this.cpfFormControl = new FormControl('04787954778');\r\n    this.clearIfNotMatchForm = new FormControl();\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/app/app.component.ts","import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  MatButtonModule, MatCardModule, MatGridListModule, MatIconModule, MatInputModule,\r\n  MatListModule,\r\n  MatSelectModule, MatSidenavModule,\r\n  MatToolbarModule\r\n}\r\n  from\r\n    '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpModule } from '@angular/http';\r\nimport { NgModule } from '@angular/core';\r\nimport 'hammerjs';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NgxMaskModule } from './ngx-mask/ngx-mask.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    MatGridListModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    NgxMaskModule.forRoot(),\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    HttpModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/app/app.module.ts","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface IConfig {\r\n  clearIfNotMatch: boolean;\r\n  dropSpecialCharacters: boolean;\r\n  specialCharacters: string[];\r\n  patterns: {\r\n    [character: string]: {\r\n      pattern: RegExp,\r\n      optional?: boolean\r\n    }\r\n  };\r\n}\r\nexport type optionsConfig = {\r\n  [P in keyof IConfig]?: IConfig[P]\r\n};\r\n\r\nexport const config: InjectionToken<string> = new InjectionToken('config');\r\n// tslint:disable-next-line:variable-name\r\nexport const new_config: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\r\n// tslint:disable-next-line:variable-name\r\nexport const initial_config: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\r\n\r\nexport const initialConfig: IConfig = {\r\n  clearIfNotMatch: false,\r\n  dropSpecialCharacters: true,\r\n  specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+'],\r\n  patterns: {\r\n    '0': {\r\n      pattern: new RegExp('\\\\d'),\r\n    },\r\n    '9': {\r\n      pattern: new RegExp('\\\\d'),\r\n      optional: true\r\n    },\r\n    'A': {\r\n      pattern: new RegExp('\\[a-zA-Z0-9\\]')\r\n    },\r\n    'S': {\r\n      pattern: new RegExp('\\[a-zA-Z\\]')\r\n    }\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/app/ngx-mask/config.ts","import {\r\n  Directive, ElementRef, forwardRef, HostListener, Input, OnInit,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MaskService } from './mask.service';\r\nimport { IConfig } from './config';\r\n\r\nconst resolvedPromise: Promise<null> = Promise.resolve(null);\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MaskDirective),\r\n      multi: true\r\n    },\r\n    MaskService\r\n  ],\r\n})\r\nexport class MaskDirective implements OnInit, ControlValueAccessor {\r\n  public constructor(\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer2,\r\n    private _maskService: MaskService,\r\n  ) {}\r\n\r\n  public ngOnInit(): void {\r\n    resolvedPromise.then(() => this._maskService.applyValueChanges(this._elementRef.nativeElement));\r\n  }\r\n\r\n  @Input('mask')\r\n  public set maskExpression(value: string) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.maskExpression = value;\r\n  }\r\n\r\n  @Input()\r\n  public set specialCharacters(value: IConfig['specialCharacters']) {\r\n    if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {\r\n      return;\r\n    }\r\n    this._maskService.maskSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set patterns(value: IConfig['patterns']) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    this._maskService.maskAvailablePatterns = value;\r\n  }\r\n\r\n  @Input()\r\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\r\n    this._maskService.dropSpecialCharacters = value;\r\n  }\r\n\r\n  @Input()\r\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\r\n    this._maskService.clearIfNotMatch = value;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  public onInput(e: KeyboardEvent): void {\r\n    const el: HTMLInputElement = (e.target as HTMLInputElement);\r\n    const position: number = el.selectionStart;\r\n\r\n    let caretShift: number = 0;\r\n    this._maskService.applyValueChanges(\r\n      this._elementRef.nativeElement,\r\n      position,\r\n      (shift: number) => caretShift = shift\r\n    );\r\n    el.selectionStart = el.selectionEnd = position + (\r\n      // tslint:disable-next-line\r\n      (e as any).inputType === 'deleteContentBackward'\r\n        ? 0\r\n        : caretShift\r\n    );\r\n  }\r\n\r\n  @HostListener('blur')\r\n  public onBlur(): void {\r\n    this._maskService.clearIfNotMatchFn(this._elementRef.nativeElement);\r\n    this._maskService.applyValueChanges(this._elementRef.nativeElement);\r\n    this._maskService.onTouch();\r\n  }\r\n\r\n  /** It writes the value in the input */\r\n  public writeValue(inputValue: string): void {\r\n    this._elementRef.nativeElement.value = this._maskService.applyMask(inputValue, this._maskService.maskExpression);\r\n    this._maskService.applyValueChanges(this._elementRef.nativeElement);\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnChange(fn: any): void {\r\n    this._maskService.onChange = fn;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public registerOnTouched(fn: any): void {\r\n    this._maskService.onTouch = fn;\r\n  }\r\n\r\n  /** It disables the input element */\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      return this._renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'true');\r\n    }\r\n    return this._renderer.removeAttribute(this._elementRef.nativeElement, 'disabled');\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/app/ngx-mask/mask.directive.ts","import { Inject, Injectable } from '@angular/core';\r\nimport { config, IConfig } from './config';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class MaskService {\r\n\r\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\r\n  public clearIfNotMatch: IConfig['clearIfNotMatch'];\r\n  public maskExpression: string = '';\r\n  public maskSpecialCharacters: IConfig['specialCharacters'];\r\n  public maskAvailablePatterns: IConfig['patterns'];\r\n  private _regExpForRemove: RegExp;\r\n  private _shift: Set<number>;\r\n\r\n  public constructor(\r\n    // tslint:disable-next-line:no-any\r\n    @Inject(DOCUMENT) private document: any,\r\n    @Inject(config) private _config: IConfig,\r\n  ) {\r\n    this._shift = new Set();\r\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n    this.maskSpecialCharacters = this._config!.specialCharacters;\r\n    this.maskAvailablePatterns = this._config.patterns;\r\n    this._regExpForRemove = new RegExp(this.maskSpecialCharacters\r\n      .map((item: string) => `\\\\${item}`)\r\n      .join('|'), 'gi');\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  public onChange = (_: any) => { };\r\n\r\n  public onTouch = () => { };\r\n\r\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => { }): string {\r\n    if (inputValue === undefined || inputValue === null) {\r\n      return '';\r\n    }\r\n\r\n    let cursor: number = 0;\r\n    let result: string = '';\r\n\r\n    const inputArray: string[] = inputValue.toString()\r\n      .split('');\r\n    // tslint:disable-next-line\r\n    for (let i: number = 0, inputSymbol: string = inputArray[0]; i\r\n      < inputArray.length; i++ , inputSymbol = inputArray[i]) {\r\n      if (result.length === maskExpression.length) {\r\n        break;\r\n      }\r\n\r\n      if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\r\n        result += inputSymbol;\r\n        cursor++;\r\n      } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\r\n        result += maskExpression[cursor];\r\n        cursor++;\r\n        this._shift.add(cursor);\r\n        i--;\r\n      } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\r\n        && this.maskAvailablePatterns[maskExpression[cursor]]\r\n        && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\r\n        cursor++;\r\n        i--;\r\n      }\r\n    }\r\n    if (result.length + 1 === maskExpression.length\r\n      && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\r\n      result += maskExpression[maskExpression.length - 1];\r\n    }\r\n\r\n    let shift: number = 1;\r\n    let newPosition: number = position + 1;\r\n    while (this._shift.has(newPosition)) {\r\n      shift++;\r\n      newPosition++;\r\n    }\r\n    cb(this._shift.has(position) ? shift : 0);\r\n    return result;\r\n  }\r\n\r\n  public applyValueChanges(element: HTMLInputElement, position: number = 0, cb: Function = () => { }): void {\r\n    const val: string = element.value;\r\n    const maskedInput: string = this.applyMask(val, this.maskExpression, position, cb);\r\n\r\n    element.value = maskedInput;\r\n\r\n    if (this.dropSpecialCharacters === true) {\r\n      this.onChange(this._removeMask(maskedInput));\r\n    } else {\r\n      this.onChange(maskedInput);\r\n    }\r\n\r\n    if (element !== this.document.activeElement) {\r\n      this.clearIfNotMatchFn(element);\r\n    }\r\n  }\r\n\r\n  public clearIfNotMatchFn(element: HTMLInputElement): void {\r\n    if (this.clearIfNotMatch === true && this.maskExpression.length\r\n      !== element.value.length) {\r\n      element.value = '';\r\n    }\r\n  }\r\n\r\n  private _removeMask(value: string): string {\r\n    if (!value) {\r\n      return value;\r\n    }\r\n    return value.replace(this._regExpForRemove, '');\r\n  }\r\n\r\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\r\n    return inputSymbol\r\n      === maskSymbol\r\n      || this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern\r\n      && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/app/ngx-mask/mask.service.ts","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaskDirective } from './mask.directive';\r\n\r\nimport { config, initial_config, initialConfig, new_config, optionsConfig } from './config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [MaskDirective],\r\n  declarations: [MaskDirective]\r\n})\r\nexport class NgxMaskModule {\r\n\r\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaskModule,\r\n      providers: [\r\n        { provide: new_config, useValue: configValue },\r\n        { provide: initial_config, useValue: initialConfig },\r\n        { provide: config, useFactory: _configFactory, deps: [initial_config, new_config] },\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// tslint:disable-next-line:max-line-length\r\nexport function _configFactory(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\r\n   return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/app/ngx-mask/ngx-mask.module.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `angular-cli.json`.\r\n\r\nexport const environment: Env = {\r\n  production: false\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/environments/environment.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { environment } from './environments/environment';\r\nimport { AppModule } from './app/app.module';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// C:/projects/ngx-mask-fork/src/main.ts"],"sourceRoot":"webpack:///"}